
there are cases where we do not really want the
version of the native code to be automatically chosen
based on the .NET profile.  for example, "net45"
doesn't really tell us much about which C runtime
library we should assume is available.

does the native code stuff in nuget 3.x get this
specific?  can we provide a package which just looks
at the environment and then has a dependency on
The Right One?

or should these packages simply be more specific?
instead of one big esqlite3 package, maybe we should
just put each one in its package?

esqlite3.dll the assembly cannot have the same name
as esqlite3.dll the native dll

xamarin.mac shouldn't even need to be built on the Mac.
just use a compatible build of SQLitePCL.raw.dll

do we need two sets of sqlite3 projects?  one set for
e, and the other set for the SL cppinterop stuff?

cppinterop is only for SL-flavored WP8.  it does not
support e.  or it only supports e.

all the custom sqlite builds need to end up called
esqlite3.  except maybe the ones for SL-flavored WP8?

need a dylib build for ios

need e nuget packages

----

clean out the rest of this file

----

Do the collation hook fix thing for config_log

consider whether maybe the sqlite3 intptr dispose should check
the version number and call sqlite3_close_v2 when it's supposedly
available.

switch to xUnit?

switch my env keywords to be the same as the ones nuget uses?

test_cases.cs nuget, nunit vs mstest

add visual studio 2013 c++ runtime sdkreference.  but injecting an
SDKReference in the .targets file sort of doesn't work, and using
a powershell tool is so inelegant.  MESSAGE.

annoying that an injected reference doesn't show up in the
References list in visual studio

error if configuration is not release or debug
but configuration in xamarin.ios is actually stuff like iPhone, etc

why does the sqlitepcl ios platform assembly show
no assembly info when viewed in xamarin studio?

Win32 in the sln file

auto-generate the test projects as well?

docs: need a complete list, in tabular form, of the platform
assemblies and an explanation of the use cases for each one.
auto-generate this.

need at least one test project for each platform assembly.  

add an NUnit project on Windows/Net45, so that build breakage
with NUnit can be detected when making changes on windows.
should reference NUnit as a nuget package

sqlite3.Mac?  or use platform-installed sqlite on MacOS?

docs on all the methods in raw, especially where the params
differ from the C API

----------------

sqlite API issues:

should sqlite3_commit_hook() return something?  the C function returns the
user pointer, which has no useful parallel for us to return.  I sort of hate
the fact that it returns void, since we can't check errors on it.  but
the underlying C function doesn't really return any useful info for error
checking either.

unprotected sqlite3_value:  sqlite3_column_value, sqlite3_bind_value, sqlite3_result_value

sqlite3_create_module

sqlite3_db_config

sqlite3_db_filename
sqlite3_db_mutex
sqlite3_db_readonly

sqlite3_get_auxdata
sqlite3_set_auxdata

sqlite3_limit

sqlite3_progress_handler

sqlite3_randomness

sqlite3_soft_heap_limit64

sqlite3_wal_autocheckpoint
sqlite3_wal_checkpoint
sqlite3_wal_checkpoint_v2
sqlite3_wal_hook

sqlite3_busy_handler

sqlite3_collation_needed -- difficult because of the be handle passed
to the callback

sqlite3_config


