
switch net45 to pinvoke so mono can use it too.

need to error on anycpu

maybe pinvoke versions should install sqlite3.dll?

add visual studio 2013 c++ runtime sdkreference

delete the old build system

error if configuration is not release or debug

configuration in xamarin.ios is actually stuff like iPhone, etc

maybe ugly should be a nuget package of its own

nuget package for "sqlite-net on sqlitepcl.raw"

build sqlite with foreign keys default on

nuspecs:
	basic
		ios in lib
		android in lib
		all others in build/targets, bundle current
	needy
		ios in lib
		android in lib
		all others in build/targets, bundle nothing
	kitchen_sink
		everything in build
		no references added
		basically just a zip file
	bundle_current
		ios in lib
		android in lib
		all others in build/targets, bundle current

Aha!  winrt dyn sqlite3 works if the Microsoft Visual C++ 2013 Runtime Package
for Windows is added as a reference.

nuget package which has no sqlite libraries in it:
	ios -- system
	android -- system
	winrt -- vs gallery
	wp8 -- vs gallery
	wp81 -- vs gallery?
	net45 -- SOL

nuget package which bundles current sqlite for every plat:
	ios -- __internal, resource (build on mac)
	android -- resource (build somewhere)
	all others -- c++/cx (static?  or dynamic?)

should we use the sqlite sdks in the vs gallery instead?
weird that they're not nuget.  and weird that there isn't
one for regular net45.  and the distinction between the two
flavors of WP81 is not there.  and the WP81 is pre-release.

maybe sqlite3.dll should go in build/native?  
so pinvoke could share it?

why does the sqlitepcl ios platform assembly show
no assembly info when viewed in xamarin studio?

android
	currently only one platform assembly
	always match?  no condition?
	move to the lib directory?
	anycpu.  no platform condition.

ios
	no platform condition.
	always want the pinvoke_sqlite3 option.
	
net45
	cppinterop_sqlite3_dynamic
	platform matching works: x64 and x86
	anycpu not available

winrt, wp (all of them)
	cppinterop_sqlite3_dynamic
	platform matching works: arm and x86
	anycpu not available

nuget targets match any cpu is busted

how do you get the reference to reset when the platform changes?
or why doesn't the reference properties dialog show the new one?

figure out a way to disable the mac/ios projects while
using msbuild from the command line

for the cppinterop dll build, why does winrt80 generate .exp
and .lib?

Win32 in the sln file

auto-generate the tests as well?

some of those solution platform configurations could go away?

rm xamarin projects from visual studio SLN so that msbuild will work

do we need separate platform assemblies for .NET 4.5 vs 4.5.1 ?

do we need separate platform assemblies for older versions of .NET,
like 4.0 ?

docs: need a complete list, in tabular form, of the platform
assemblies and an explanation of the use cases for each one.

need at least one test project for each platform assembly.  

add tests that use actual named sqlite database files, not just
:memory: and temp dbs.

add an NUnit project on Windows/Net45, so that build breakage
with NUnit can be detected when making changes on windows.
should reference NUnit as a nuget package

special build for desktop Mono?  or does net45 cover that?

sqlite3.Mac?  or use platform-installed sqlite on MacOS?

separate build of iOS version with a bundled SQLite __Internal ?
would need to build sqlite3 for iOS so we can embed it in the resource
for __Internal.  MonoDevelop Makefile integration?

docs on all the methods in raw, especially where the params
differ from the C API

question about whether we are statically linking the C library
or not, for the mixed mode assembly.

for the windows pinvoke projects, we need to be building sqlite3 native dlls

Xamarin.Android, pinvoke my_sqlite3, with sqlite3 lib in resource

i hate the way all the tests show up in visual studio, 5 tests with
the same name, no way to distinguish between the platform versions
of each test.

fix those weird compiler warnings on iOS and Android ?

sqlcipher?

note that SQLitePCL.Ugly only builds with the "new" reflection APIs.

looks like profile 259 is the new 78

hmmm.  note that one axis of configuration we are not varying is
the compile options for sqlite itself.  we always build with FTS
and with ENABLE_COLUMN_METADATA, and nothing else

----------------

sqlite API issues:

should sqlite3_commit_hook() return something?  the C function returns the
user pointer, which has no useful parallel for us to return.  I sort of hate
the fact that it returns void, since we can't check errors on it.  but
the underlying C function doesn't really return any useful info for error
checking either.

unprotected sqlite3_value:  sqlite3_column_value, sqlite3_bind_value, sqlite3_result_value

sqlite3_create_module

sqlite3_db_config

sqlite3_db_filename
sqlite3_db_mutex
sqlite3_db_readonly
sqlite3_db_status

sqlite3_get_auxdata
sqlite3_set_auxdata

sqlite3_limit

sqlite3_progress_handler

sqlite3_randomness

sqlite3_soft_heap_limit64

sqlite3_status

sqlite3_stmt_status

sqlite3_wal_autocheckpoint
sqlite3_wal_checkpoint
sqlite3_wal_checkpoint_v2
sqlite3_wal_hook

sqlite3_busy_handler

sqlite3_collation_needed -- difficult because of the be handle passed
to the callback

sqlite3_config


