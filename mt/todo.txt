
goal is to hide the delegate types one level
deeper, not exposing them to dyn, so that
dyn doesn't have to be specific to cdecl
or stdcall.  so knowledge of the calling convention
could exist entirely inside the delegates class.

--

missing test for sqlite3_exec with a hook.
it would probably crash, since the implementation
doesn't gc protect the delegate?  or is the one
a special case because the delegate only lives
as long as the call?

stdcall.  which matters only for x86.  for x64 and
ARM, this is ignored and cdecl is used.

do we need a separate build for calling convention?
or just build both stdcall and cdecl versions
and have them both?

unforutnately, the calling convention is in the
unmanaged function ptr delegate type in MyDelegateTypes,
which is referenced from dyn.

need to setup some x86 stdcall builds for testing?
or just one winsqlite3 itself.

is the calling convention handled at the call site?
if we have a custom delegate type with a calling
convention, and we cast it to a Func<> kind of delegate,
does the calling convention still work?

irritating that test suite passes using winsqlite3
and either calling convention.  why?

--

layers:

	unmanaged functon pointers

	dyn
		callbacks
		certain cases, byte arrays and string

	raw
		intptr wrappers
		public

dyn and raw could be merged?  unless we want
to keep the ugliness of callbacks more isolated

--

DI for the utf8 stuff

debug vs release builds?

mv code into the project directories under mt.

default load, so the setup call can be optional
in many or most cases

more xunit test cases

how to do __internal for iOS?  just pass null to dlopen?

restore those win32 set directory calls somewhere

try to have no ifdefs in core

chgs to intptr dispose?

version of gen_build which only does the nugets
for packaging e_sqlite and sqlcipher builds

SourceGear name?

stuff in csproj so we can do dotnet pack

AssemblyInfo stuff, version numbers

instead of delegate-ish types in raw.cs should the functions
take something like Func<whatever> ?

